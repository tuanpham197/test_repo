// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: logger.proto

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerClient interface {
	StoreLogFile(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StatusRes, error)
	StoreLogDB(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StatusRes, error)
	GetListLog(ctx context.Context, in *FilterLog, opts ...grpc.CallOption) (*LogRes, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) StoreLogFile(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/logger.Logger/StoreLogFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) StoreLogDB(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/logger.Logger/StoreLogDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) GetListLog(ctx context.Context, in *FilterLog, opts ...grpc.CallOption) (*LogRes, error) {
	out := new(LogRes)
	err := c.cc.Invoke(ctx, "/logger.Logger/GetListLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
// All implementations must embed UnimplementedLoggerServer
// for forward compatibility
type LoggerServer interface {
	StoreLogFile(context.Context, *LogRequest) (*StatusRes, error)
	StoreLogDB(context.Context, *LogRequest) (*StatusRes, error)
	GetListLog(context.Context, *FilterLog) (*LogRes, error)
	mustEmbedUnimplementedLoggerServer()
}

// UnimplementedLoggerServer must be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (UnimplementedLoggerServer) StoreLogFile(context.Context, *LogRequest) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreLogFile not implemented")
}
func (UnimplementedLoggerServer) StoreLogDB(context.Context, *LogRequest) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreLogDB not implemented")
}
func (UnimplementedLoggerServer) GetListLog(context.Context, *FilterLog) (*LogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLog not implemented")
}
func (UnimplementedLoggerServer) mustEmbedUnimplementedLoggerServer() {}

// UnsafeLoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerServer will
// result in compilation errors.
type UnsafeLoggerServer interface {
	mustEmbedUnimplementedLoggerServer()
}

func RegisterLoggerServer(s grpc.ServiceRegistrar, srv LoggerServer) {
	s.RegisterService(&Logger_ServiceDesc, srv)
}

func _Logger_StoreLogFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).StoreLogFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/StoreLogFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).StoreLogFile(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_StoreLogDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).StoreLogDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/StoreLogDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).StoreLogDB(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_GetListLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).GetListLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.Logger/GetListLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).GetListLog(ctx, req.(*FilterLog))
	}
	return interceptor(ctx, in, info, handler)
}

// Logger_ServiceDesc is the grpc.ServiceDesc for Logger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreLogFile",
			Handler:    _Logger_StoreLogFile_Handler,
		},
		{
			MethodName: "StoreLogDB",
			Handler:    _Logger_StoreLogDB_Handler,
		},
		{
			MethodName: "GetListLog",
			Handler:    _Logger_GetListLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger.proto",
}
